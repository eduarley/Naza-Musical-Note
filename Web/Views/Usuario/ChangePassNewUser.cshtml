@model Web.Viewmodels.ViewModelPassNewUser

@{
    Layout = null;
}

@{
    ViewBag.Title = "Cambio Contraseña";
}


@using (Html.BeginForm("CambioClave", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Cambio de contraseña</title>
        <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
        <script defer src="https://use.fontawesome.com/releases/v5.0.1/js/all.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.12/jquery.transit.js" integrity="sha256-mkdmXjMvBcpAyyFNCVdbwg4v+ycJho65QLDwVE3ViDs=" crossorigin="anonymous"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
        <link href="~/Content/dist/css/cambio/cambiostyle.css" rel="stylesheet" />
    </head>
    <body>
        <!-- partial:index.partial.html -->
        <!-- NORMALIZED CSS INSTALLED-->
        <!-- View settings for more info.-->
        <div id="container">
            <div id="inviteContainer">
                <div class="acceptContainer">
                    <form>
                        <h1>Cambio de contraseña</h1>
                        <div class="formContainer">
                            <div class="formDiv" style="transition-delay: 0.2s">
                                <p style="margin-bottom:15px">Recuerde que la contraseña debe coincidir en ambos campos.</p>
                            </div>
                            <div class="formDiv" style="transition-delay: 0.4s">
                                @Html.HiddenFor(model => model.IdUsuario)
                                <p>INGRESE SU NUEVA CONTRASEÑA</p>
                                <!--<input type="text" />-->
                                @Html.PasswordFor(model => model.NewClave, new { htmlAttributes = new { @class = "disennoinputs" } })
                                @Html.ValidationMessageFor(model => model.NewClave, "", new { @class = "text-danger" })
                            </div>
                            <div class="formDiv" style="transition-delay: 0.4s">
                                <p>CONFIRME SU NUEVA CONTRASEÑA</p>
                                <!--<input type="text" />-->
                                @Html.PasswordFor(model => model.ConfirmNewClave, new { htmlAttributes = new { @class = "disennoinputs" } })
                                @Html.ValidationMessageFor(model => model.ConfirmNewClave, "", new { @class = "text-danger" })
                            </div>
                            <div class="formDiv" style="transition-delay: 0.6s">
                                <!--
    <button class="acceptBtn" type="submit">Ingresar</button><span class="register">Necesita una cuenta?<a href="#">Registrar</a></span>
    -->
                                <!--<button class="acceptBtn" type="submit">
                                    Guardar cambio
                                </button>-->
                                <div style="text-align:center">
                                    <button id="botonAceptar" class="btn-primary" type="submit">
                                        Guardar cambio
                                    </button>
                                </div>
                                <!--<span class="register">Necesita una cuenta?<a href="#">Registrar</a></span>-->
                            </div>

                        </div>

                    </form>
                </div>
            </div>
        </div>
        <!-- partial -->
        <script src="~/Content/dist/js/cambio/script.js"></script>
    </body>
</html>
}
<script type="text/javascript">
    // Habilita los tooltips
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })

    $(document).ready(function () {
        //document.getElementById('botonAceptar').disabled = true;
        //document.getElementById('botonAceptar').style= "background-color: white; color: gray"
        $("#botonAceptar").attr('disabled', 'disabled');
        $("#botonAceptar").addClass('btn-primary-disabled');
    });

    $("#NewClave").on("keyup paste", function () {
        //alert("Hola mundo");
        validarClave();
        //$("#botonAceptar").removeAttr('disabled');
        //$("#botonAceptar").removeClass('btn-primary-disabled');
    });

    $("#ConfirmNewClave").on("keyup paste", function () {
        //alert('Hola mundo');
        validarClave();
        //$("#botonAceptar").removeAttr('disabled');
        //$("#botonAceptar").removeClass('btn-success-disabled');
    });

    //$("#claveNuevaConfirm").keyup(function (e) {
    //    validarClave();
    //});

    function validarClave() {


        //var claveNueva = $("#claveNueva").val();
        //var claveNuevaConfirm = $("#claveNuevaConfirm").val();
        var claveNueva = $("#NewClave").val();
        var claveNuevaConfirm = $("#ConfirmNewClave").val();
        //alert(claveNueva2 + claveNueva3);
        var claveValidada = false;


        //Tamaño de la clave entre 9 y 25
        let tamanno = (claveNueva.length >= 9 && claveNueva.length <= 25 && claveNuevaConfirm.length >= 9 && claveNuevaConfirm.length <= 25);
        if (tamanno) {
            claveValidada = true;
        } else {
            claveValidada = false;
        }



        //debugger;
        //let regexLetraMinuscula = new RegExp(/(?=.* [a-z]).{1,}$/);
        let regexLetraMinuscula = /[a-z]$/;
        let letraMinuscula1 = regexLetraMinuscula.test(claveNueva);
        let letraMinuscula2 = regexLetraMinuscula.test(claveNuevaConfirm);
        if (letraMinuscula1 == true && letraMinuscula2 == true) {
            claveValidada = true;
        }

        if (letraMinuscula1 == false && letraMinuscula2 == false || letraMinuscula1 == true && letraMinuscula2 == false || letraMinuscula1 == false && letraMinuscula2 == true) {
            claveValidada = false;
        }


        //let regexLetraMayuscula = new RegExp(/(?=.*[A-Z]).{1,}$/);
        let regexLetraMayuscula = /[A-Z]$/;
        let letraMayuscula1 = regexLetraMayuscula.test(claveNueva);
        let letraMayuscula2 = regexLetraMayuscula.test(claveNuevaConfirm);
        if (letraMayuscula1 == true && letraMayuscula2 == true) {
            claveValidada = true;
        }

        if (letraMayuscula1 == false && letraMayuscula2 == false || letraMayuscula1 == true && letraMayuscula2 == false || letraMayuscula1 == false && letraMayuscula2 == true) {
            claveValidada = false;
        }


        //let regexNumero = new RegExp(/(?=.*[0-9]).{1,}$/);
        let regexNumero = /[0-9]$/;
        let numero1 = regexNumero.test(claveNueva);
        let numero2 = regexNumero.test(claveNuevaConfirm);
        if (numero1 == true && numero2 == true) {
            claveValidada = true;
        }

        if (numero1 == false && numero2 == false || numero1 == true && numero2 == false || numero1 == false && numero2 == true) {
            claveValidada = false;
        }


        //let regexEspeciales = new RegExp(/(?=.*[!#$%&'()*+,-./:;<=>?[\]^_{|}~]).{1,}$/);
        let regexEspeciales = /[!#$%&'()*+,-./:;<=>?[\]^_{|}~]$/;
        let especiales1 = regexEspeciales.test(claveNueva);
        let especiales2 = regexEspeciales.test(claveNuevaConfirm);
        if (especiales1 == true && especiales2 == true) {
            claveValidada = true;
        }

        if (especiales1 == false && especiales2 == false || especiales1 == true && especiales2 == false || especiales1 == false && especiales2 == true) {
            claveValidada = false;
        }

        //$("#botonAceptar").prop('disabled', claveValidada);
        if (claveValidada) {
            $("#botonAceptar").removeAttr('disabled');
            $("#botonAceptar").removeClass('btn-primary-disabled');
        } else {
            $("#botonAceptar").attr('disabled', 'disabled');
            $("#botonAceptar").addClass('btn-primary-disabled');
        }
    }

</script>
    @Scripts.Render("~/bundles/jqueryval")
