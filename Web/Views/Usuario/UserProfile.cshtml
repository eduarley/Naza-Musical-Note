@model Infraestructure.Models.Usuario

@{ ViewBag.Title = "Perfil"; }

@{ Infraestructure.Models.Usuario UsuarioLogueado = (Infraestructure.Models.Usuario)Session["User"];
    var correoUsuario = UsuarioLogueado.Correo;

}




<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">Inicio</a></li>
                    <li class="breadcrumb-item active">Perfil</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<style>
    #example {
        background-repeat: repeat-x;
        /*
        margin-left: 20px;
        margin-top: 13px;
        */
    }

        #example .but1 {
            line-height: 0px;
            margin-top: 0px;
            margin-left: 0px;
            margin-right: 0px;
            display: inline-block;
            position: relative;
            margin-bottom: 30px
        }

            #example .but1 a {
                position: absolute;
                color: white
                /*
                top: 5px;
                left: 5px;
                */
            }
</style>



<div class="row">
    <div class="col-md-3">

        <!-- Profile Image -->
        <div class="card card-primary card-outline">
            <div class="card-body box-profile">
                <div class="text-center">
                    @if (Model.Foto != null)
                    {


                        <div id="example">
                            <div class="but1">
                                <!--Card image-->
                                <img class="profile-user-img img-fluid img-circle"
                                     src="data:image/jpeg;charset=utf-8;base64,
                                    @Convert.ToBase64String(Model.Foto)"
                                     alt="user image"
                                     style="height: 200px; width:200px">
                                <!--/.Card image-->
                                <a href="#" onclick="quitarFoto()" class="badge-pill badge badge-secondary">Quitar imagen</a>
                            </div>
                        </div>



                        @*
                               <img src="data:image/jpeg;charset=utf-8;base64,
                            @Convert.ToBase64String(Model.Foto)"
                                id="ImagenUsuario"
                                class="profile-user-img img-fluid img-circle"
                                style="height: 200px; width:200px" />
                        *@





                    }
                    else
                    {
                        <img class="profile-user-img img-fluid img-circle"
                             src="~/Content/dist/img/avatar.png"
                             alt="User profile picture">
                    }

                </div>
                <h3 class="profile-username text-center">@Model.NombreCompleto</h3>
                <center>
                    <p class="text-muted text-center">@Model.Rol.Descripcion</p>
                </center>
                <ul class="list-group list-group-unbordered mb-3">
                    <li class="list-group-item">
                        <b>@Html.DisplayNameFor(model => model.Id)</b> <a class="float-right">@Html.DisplayFor(model => model.Id)</a>
                    </li>
                    <li class="list-group-item">
                        <b>@Html.DisplayNameFor(model => model.Telefono)</b> <a class="float-right">@Html.DisplayFor(model => model.Telefono)</a>
                    </li>

                    <li class="list-group-item">
                        <b>@Html.DisplayNameFor(model => model.Id)</b> <a class="float-right">@Html.DisplayFor(model => model.Id)</a>
                    </li>

                    <li class="list-group-item">
                        <b>@Html.DisplayNameFor(model => model.Estado)</b>
                        @if (Model.Estado)
                        {
                            <a class="float-right">Activo</a>
                        }
                        else
                        {
                            <a class="float-right">Inactivo</a>
                        }
                    </li>
                    <li class="list-group-item" id="mail">
                        <b>@Html.DisplayNameFor(model => model.Correo)</b><a class="float-right" mailto="@correoUsuario">@correoUsuario</a>
                    </li>
                    <li class="list-group-item">
                        <b>@Html.DisplayNameFor(model => model.Fecha_creacion)</b> <a class="float-right">@Html.DisplayFor(model => model.Fecha_creacion)</a>
                    </li>
                </ul>

            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
        <!-- /.card -->
    </div>




    <!-- /.col -->
    <div class="col-md-9">
        <div class="card card-green card-outline">
            <div class="card-header p-2">
                <div style="float: right; cursor: pointer">
                    <button class="btn" id="btnTooltip">
                        <i class="fa fa-info-circle text-primary" style="font-size: x-large"></i>
                    </button>
                </div>
                <a class="nav-link" href="#">Editar</a>

            </div><!-- /.card-header -->
            <div class="card-body">

                <div>
                    @using (Html.BeginForm("UpdateUserProfile", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data", id = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="card-body p-3 col-md-12">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.Id)
                            @Html.HiddenFor(model => model.Fecha_creacion)
                            @Html.HiddenFor(model => model.IdRol)
                            @Html.HiddenFor(model => model.Estado)
                            @Html.HiddenFor(model => model.Clave)
                            @Html.HiddenFor(model => model.Foto)
                            @if (Model.Foto != null)
                            {

                            }




                            <div class="col-md-12 form-horizontal">
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                                        <p id="errorNombre" class="text-danger"></p>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Apellido_paterno, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Apellido_paterno, new { htmlAttributes = new { @class = "form-control" } })
                                        <p id="errorApellido1" class="text-danger"></p>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Apellido_materno, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Apellido_materno, new { htmlAttributes = new { @class = "form-control" } })

                                    </div>
                                </div>



                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                                        <p id="errorTelefono" class="text-danger"></p>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Correo, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Correo, new { htmlAttributes = new { @class = "form-control" } })
                                        <p id="errorCorreo" class="text-danger"></p>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Foto, htmlAttributes: new { @class = "col-sm-2 control-label col-md-2" })
                                    <div class="col-md-10">
                                        <input type="file" accept="image/png,image/jpeg" class="form-control" name="ImageFile" />
                                    </div>
                                </div>
                                <p class="tooltip--triangle" data-tooltip="Editar la contraseña con la que inicias sesión">
                                    <button type="button" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#myModal"><i class="fas fa-lock"></i> Cambiar Clave</button>
                                </p>

                            </div>
                        </div>
                        <div class="modal-footer justify-content-end">
                            <button id="btnGuardar" type="button" class="btn btn-success">Guardar</button>
                        </div>

                    }

                </div>

            </div><!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
    <!-- /.col -->
</div>
<!-- /.row -->
<!--MODAL CAMBIO CLAVE-->
<div class="modal fade" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">

                <h4 class="modal-title">Editar clave</h4>
                <div style="float: right; cursor: pointer">
                    <button class="btn" id="btnTooltipClave">
                        <i class="fa fa-info-circle text-primary" style="font-size: x-large"></i>
                    </button>
                </div>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group row">
                    <label class="col-sm-2 control-label col-md-2">Clave</label>
                    <div class="col-md-10">

                        <input id="pass" type="password" class="form-control" />
                        <p class="text-danger" id="errorPass"></p>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 control-label col-md-2">Confirmar</label>
                    <div class="col-md-10">
                        <input id="confirmPass" type="password" class="form-control" />
                        <p class="text-danger" id="errorConfirmPass"></p>
                    </div>
                </div>
               
            </div>
            <div class="modal-footer justify-content-end">

                <button class="btn btn-danger btn-sm " data-dismiss="modal">
                    <span class="glyphicon glyphicon-remove"></span> Cancelar
                </button>
                <button class="btn btn-success btn-sm" type="button" style="margin-right:5px;" id="btnCambiarClave">
                    <span class="glyphicon glyphicon-pencil"></span> Guardar
                </button>
            </div>

        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>



@section scripts {

    <!-- Tippy JS para tooltips-->
    <script src="@Html.Raw("https://unpkg.com/@popperjs/core@2")"></script>
    <script src="https://unpkg.com/tippy.js@6"></script>
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/animations/scale.css" />

    <script>
        // With the above scripts loaded, you can call `tippy()` with a CSS
        // selector and a `content` prop:
        tippy('#btnTooltip', {
            content: 'Aquí puedes editar directamente tu información personal',
            arrow: true,
            animation: 'scale',
            trigger: 'click',
        });
        tippy('#btnTooltipClave', {
            content:    '<ul>'+
                        '<li>Entre 9 y 25 caracteres.</li>' +
                        '<li>Al menos una mayúscula.</li>'+
                        '<li>Al menos una minúscula.</li>'+
                        '<li>Al menos un caracter especial.</li>'+
                        '<li>Al menos un número.</li>'+
                        '</ul>',

            arrow: true,
            animation: 'scale',
            trigger: 'click',
            interactive: true,
            allowHTML: true,
        });
    </script>

    <script>

        $(document).ready(function () {


        // Recibe los parámetros del Controller
        var option = '@TempData["Action"]'
        var message = '@TempData["Message"]'

        if (option == 'U') {
            Swal.fire('Éxito!',
                'Se ha actualizado tu perfil correctamente.',
                'success');
        }

        if (option == 'E') {
            Swal.fire('Error!',
                'Se ha producido un error: ' + message,
                'error');
        }
        if (option == 'P') {
            Swal.fire('Éxito!',
                'Se ha actualizado tu clave correctamente.',
                'success');
            }

            $('#pass').val('');
            $('#confirmPass').val('');
        });



        $('#myModal').on('shown.bs.modal', function () {
            $('#pass').val('');
        })
    </script>


    <script>




        $("#pass").on("keyup paste", function () {
            limpiarErrores();
            validarClave();
        });
        $("#confirmPass").on("keyup paste", function () {
            limpiarErrores();
            validarClave();
        });



        function validarClave() {

            let hasNumber = new RegExp('[0-9]+');
            let hasUpperChar = new RegExp('[A-Z]+');
            let hasMiniMaxChars = new RegExp('.{9,25}');
            let hasLowerChar = new RegExp('[a-z]+');
            let hasSymbols = /(?=.*[!#$%&'()*+,-./:;<=>?[\]^_{|}~]).{1,}$/;

            var pswd = $('#pass').val();
            var cpswd = $('#confirmPass').val();


            if (pswd.trim() == "") {
                $('#errorPass').text('El campo clave no puede estar en blanco.');
                //$('#pass').addClass('is-invalid');
                $('#pass').focus();
                return;
            }

            if (!hasMiniMaxChars.test(pswd)) {
                $('#errorPass').text('La clave debe ser entre 9 y 25 caracteres.');
                //$('#pass').addClass('is-invalid');
                $('#pass').focus();
                return;
            }

            if (!hasNumber.test(pswd)) {
                $('#errorPass').text('La clave debe contener al menos un número.');
                //$('#pass').addClass('is-invalid');
                $('#pass').focus();
                return;
            }

            if (!hasUpperChar.test(pswd)) {
                $('#errorPass').text('La clave debe contener al menos una letra mayúscula.');
                //$('#pass').addClass('is-invalid');
                $('#pass').focus();
                return;
            }

            if (!hasLowerChar.test(pswd)) {
                $('#errorPass').text('La clave debe contener al menos una letra minúscula.');
                //$('#pass').addClass('is-invalid');
                $('#pass').focus();
                return;
            }
            if (!hasSymbols.test(pswd)) {
                $('#errorPass').text('La clave debe contener al menos un caracter especial.');
                //$('#pass').addClass('is-invalid');
                $('#pass').focus();
                return;
            }

            if (pswd.trim() != cpswd.trim()) {
                $('#errorConfirmPass').text('Ambos campos no coinciden.');
                //$('#confirmPass').addClass('is-invalid');
                $('#confirmPass').focus();
                return;
            }
        }



        function validarCampos() {
            limpiarErrores();

            var nombre = $('#Nombre');
            var apellido1 = $('#Apellido_paterno');
            var telefono = $('#Telefono');
            var correo = $('#Correo');


            if (nombre.val().trim() == "") {
                $('#errorNombre').text('El campo nombre no puede estar vacío');
                nombre.focus();
                return;
            }
            if (apellido1.val().trim() == "") {
                $('#errorApellido1').text('El campo primer apellido no puede estar vacío');
                apellido1.focus();
                return;
            }
            if (correo.val().trim() == "") {
                $('#errorCorreo').text('El campo correo no puede estar vacío');
                correo.focus();
                return;
            }

            if (telefono.val().trim() != '') {
                let telefonoRegEx = new RegExp('^[0-9]{8,8}$');
                debugger;
                if (!telefonoRegEx.test(telefono.val().trim())) {
                    $('#errorTelefono').text('El campo teléfono solo debe incluir 8 números sin espacios ni guiones');
                    telefono.focus();
                    return;
                }
            }

            let correoRegEx = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/
            if (!correoRegEx.test(correo.val().trim())) {
                $('#errorCorreo').text('El campo correo no posee un formato correcto');
                correo.focus();
                return;
            }

            //Hacer submit si pasa las validaciones
            $('#form').submit();


        }





        function limpiarErrores() {
            $('#errorPass').text('');
            $('#errorConfirmPass').text('');
            $('#errorNombre').text('');
            $('#errorApellido1').text('');
            $('#errorTelefono').text('');
            $('#errorCorreo').text('');
            //$('#errorPass').removeClass('is-invalid');
            //$('#errorConfirmPass').removeClass('is-invalid');
        }



        $('#btnGuardar').click(function () {
            validarCampos();
        });


        $('#btnCambiarClave').click(function () {
            var pswd = $('#pass').val();
            var cpswd = $('#confirmPass').val();
            if (pswd.trim() == "") {
                $('#errorPass').text('El campo clave no puede estar en blanco.');
                $('#pass').focus();
                return;
            }
            if (pswd.trim() != cpswd.trim()) {
                $('#errorConfirmPass').text('Ambos campos no coinciden.');
                //$('#confirmPass').addClass('is-invalid');
                $('#confirmPass').focus();
                return;
            }

            var data = {
                id: '@UsuarioLogueado.Id',
                pass: $('#pass').val().trim(),
                confirmPass: $('#confirmPass').val().trim(),
            }
            CambiarClave(data);
        });

    </script>


    <script>
        function actualizarPerfil(data) {
            $.ajax({
                type: "POST",
                url: '/Usuario/UpdateUserProfile',

                data: data,
                success: function (data) {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    location.reload();
                }
            })
        }
    </script>

    <script>
        function CambiarClave(data) {
            $.ajax({
                type: "POST",
                url: '/Usuario/ChangePasswordProfile',

                data: data,
                success: function (data) {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    location.reload();
                }
            })
        }
    </script>


    <script>
        var id = '@Model.Id';
        function quitarFoto() {
            Swal.fire({
                title: 'Estás seguro?',
                text: "Se eliminará la imagen perfil este usuario.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, quítala!',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: '/Usuario/DeleteImage',
                        data: { 'id': id },
                        success: function (data) {

                            location.reload();
                        },
                        error: function (xhr, status, error) {
                            location.reload();
                        }
                    })


                }
            })
        }

    </script>
}

